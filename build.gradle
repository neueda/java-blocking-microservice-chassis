import org.apache.tools.ant.filters.ReplaceTokens
import org.springframework.cloud.contract.verifier.config.TestFramework

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.cloud.contract' version '3.0.3'
    id 'com.gorylenko.gradle-git-properties' version '2.3.1'
//doc
    id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.github.johnrengelman.processes' version '0.5.0'
//    id 'maven-publish'
}
group = 'com.neueda.java-blocking-microservice-chassis'
description = 'Java Blocking Microservice Chassis'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '16'

ext {
    snippetsDir = file 'build/generated-snippets'
    springCloudVersion = '2020.0.3'
    springDocVersion = '1.5.10'
    testcontainersVersion = '1.15.3'
    managementPort = '8081'
}

if (hasProperty('jarBaseName'))
    bootJar.archiveFileName = "${jarBaseName}.jar"
else
    ext.jarBaseName = archivesBaseName

sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    compileOnly.extendsFrom annotationProcessor

    testCompileOnly.extendsFrom compileOnly
    testAnnotationProcessor.extendsFrom annotationProcessor

    intTestImplementation.extendsFrom testImplementation
    intTestCompileOnly.extendsFrom testCompileOnly
    intTestAnnotationProcessor.extendsFrom testAnnotationProcessor
    intTestRuntimeOnly.extendsFrom testRuntimeOnly

    asciidoctorExt
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/release' }
}
repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/release' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.5.3'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:3.0.3'
    implementation 'org.liquibase:liquibase-core:4.3.5'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.3'
    implementation 'org.projectlombok:lombok:1.18.20'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.5.3'
    implementation 'org.springframework.boot:spring-boot-configuration-processor:2.5.3'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.3'
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.10'
    implementation 'jakarta.validation:jakarta.validation-api:2.0.2'
    implementation 'io.swagger.core.v3:swagger-models:2.1.9'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools:2.5.3'
    runtimeOnly 'com.h2database:h2:1.4.200'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.3'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.5.RELEASE'
    testImplementation 'io.rest-assured:spring-mock-mvc:4.3.3'
    testImplementation 'org.postgresql:postgresql:42.2.23'
    testImplementation 'org.testcontainers:postgresql:1.16.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.0'
    testImplementation 'org.testcontainers:jdbc:1.16.0'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier:3.0.3'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner:3.0.3'
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

processResources {
    eachFile {
        if (relativeSourcePath ==~ /^(config\/)?application(-\w+)?.(ya?ml|properties)$/) {
            project.properties
                    .findAll { it?.value instanceof String }
                    .each { filter(ReplaceTokens, tokens: [(it.key): it.value]) }
        }
    }
}

bootJar {
// https://docs.spring.io/spring-boot/docs/2.5.4/gradle-plugin/reference/htmlsingle/#packaging-executable.configuring.layered-archives.configuration
    layered {
        application {
            intoLayer("spring-boot-loader") {
                include "org/springframework/boot/loader/**"
            }
            intoLayer("application")
        }
        dependencies {
            intoLayer("application") {
                includeProjectDependencies()
            }
            intoLayer("snapshot-dependencies") {
                include "*:*:*SNAPSHOT"
            }
            intoLayer("dependencies")
        }
        layerOrder = ["dependencies", "spring-boot-loader", "snapshot-dependencies", "application"]
    }
}

jar { enabled = false }

// https://docs.spring.io/spring-boot/docs/2.5.4/gradle-plugin/reference/htmlsingle/#integrating-with-actuator.build-info
springBoot {
    buildInfo {
        properties {
            additional = ['java.version': sourceCompatibility]
        }
    }
}

gitProperties {
    keys = ['git.commit.id']
}

contracts {
    testFramework = TestFramework.JUNIT5
    testMode = 'MockMvc'
    packageWithBaseClasses = "${group}.contracts"
    contractsDslDir = file 'src/test/resources/contracts'
}

contractTest {
    useJUnitPlatform { excludeEngines 'junit-vintage' }
}

test {
    useJUnitPlatform { excludeEngines 'junit-vintage' }
    outputs.dir snippetsDir
}

asciidoctor {
    // By convention it sets
    // sourceDir to src/docs/asciidoc
    // outputDir to ${buildDir}/docs/asciidoc
    // https://asciidoctor.github.io/asciidoctor-gradle-plugin/development-3.x/user-guide/#_include_directives_and_base_directory
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    baseDirFollowsSourceDir()
    options backend: 'html', doctype: 'book'
    dependsOn test, contractTest
}

openApi {
    apiDocsUrl = "http://localhost:$managementPort/actuator/openapi/springdocDefault/yaml"
    outputFileName = 'openapi.yaml'
    outputDir = file "$buildDir/docs"
}
task intTest(type: Test) {
    description = 'Runs integration tests only'
    group = 'verification'

    useJUnitPlatform { excludeEngines 'junit-vintage' }
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
}
check.dependsOn intTest

task buildImage(type: Exec) {
    workingDir rootDir
    executable 'docker'
    args 'build', '-t', 'chassis:openj9', '.'
}
task cleanup(type: Delete) {
    outputs.upToDateWhen { false }
    delete 'log', '.gradle'
    dependsOn clean
}
