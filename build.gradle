import org.springframework.cloud.contract.verifier.config.TestFramework
//plugins
plugins {
    // Core
    id 'jacoco'

    // Spring
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'org.springframework.cloud.contract'
    id 'com.gorylenko.gradle-git-properties'

    //doc
    id 'org.springdoc.openapi-gradle-plugin'
    id 'org.asciidoctor.jvm.convert'
    id 'com.github.johnrengelman.processes'

    // Tests
    id 'com.adarshr.test-logger'
}

group = 'com.neueda.java-blocking-microservice-chassis'
description = 'Java Blocking Microservice Chassis'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '16'

ext {
    snippetsDir = file 'build/generated-snippets'
    springCloudVersion = '2020.0.3'
    springDocVersion = '1.5.10'
    testcontainersVersion = '1.15.3'
    managementPort = '8081'
}

if (hasProperty('jarBaseName'))
    bootJar.archiveFileName = "${jarBaseName}.jar"
else
    ext.jarBaseName = archivesBaseName

sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    compileOnly.extendsFrom annotationProcessor

    testCompileOnly.extendsFrom compileOnly
    testAnnotationProcessor.extendsFrom annotationProcessor

    intTestImplementation.extendsFrom testImplementation
    intTestCompileOnly.extendsFrom testCompileOnly
    intTestAnnotationProcessor.extendsFrom testAnnotationProcessor
    intTestRuntimeOnly.extendsFrom testRuntimeOnly

    asciidoctorExt
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/release' }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

dependencies {
    //Used to monitoring and manage application
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.5.3'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:3.0.3'

    //  used for Persistence data
    implementation 'org.liquibase:liquibase-core:4.3.5'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.3'

    //API Documentation
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.10'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.5.RELEASE'

    //testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.3'
    testImplementation 'io.rest-assured:spring-mock-mvc:4.3.3'
    implementation 'jakarta.validation:jakarta.validation-api:2.0.2'
    implementation 'io.swagger.core.v3:swagger-models:2.1.9'

    // Development Tools used to develop an application
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.springframework.boot:spring-boot-starter-validation:2.5.3'
    implementation 'org.springframework.boot:spring-boot-configuration-processor:2.5.3'
    runtimeOnly 'com.h2database:h2:1.4.200'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools:2.5.3'

    //used to build Restfull web
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.3'

    //Test Containers
    intTestRuntimeOnly 'org.postgresql:postgresql:42.2.23'
    intTestImplementation 'org.testcontainers:postgresql:1.16.0'
    intTestRuntimeOnly 'org.testcontainers:junit-jupiter:1.16.0'
    intTestImplementation 'org.testcontainers:jdbc:1.16.0'

    //Contract Testing
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier:3.0.3'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner:3.0.3'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'


}
//processResources {
//    eachFile {
//        if (relativeSourcePath ==~ /^(config\/)?application(-\w+)?.(ya?ml|properties)$/) {
//            project.properties
//                    .findAll { it?.value instanceof String }
//                    .each { filter(ReplaceTokens, tokens: [(it.key): it.value]) }
//        }
//    }
//}

bootJar {
// https://docs.spring.io/spring-boot/docs/2.5.4/gradle-plugin/reference/htmlsingle/#packaging-executable.configuring.layered-archives.configuration
    layered {
        application {
            intoLayer("spring-boot-loader") {
                include "org/springframework/boot/loader/**"
            }
            intoLayer("application")
        }
        dependencies {
            intoLayer("application") {
                includeProjectDependencies()
            }
            intoLayer("snapshot-dependencies") {
                include "*:*:*SNAPSHOT"
            }
            intoLayer("dependencies")
        }
        layerOrder = ["dependencies", "spring-boot-loader", "snapshot-dependencies", "application"]
    }
}

jar { enabled = false }

// https://docs.spring.io/spring-boot/docs/2.5.4/gradle-plugin/reference/htmlsingle/#integrating-with-actuator.build-info
springBoot {
    buildInfo {
        properties {
            additional = ['java.version': sourceCompatibility]
        }
    }
}

gitProperties {
    keys = ['git.commit.id']
}

contracts {
    testFramework = TestFramework.JUNIT5
    testMode = 'MockMvc'
    packageWithBaseClasses = "${group}.contracts"
    contractsDslDir = file 'src/test/resources/contracts'
}

contractTest {
    useJUnitPlatform { excludeEngines 'junit-vintage' }
}

test {
    useJUnitPlatform { excludeEngines 'junit-vintage' }
    outputs.dir snippetsDir
    finalizedBy jacocoTestReport
}
testlogger {
    theme 'mocha'
    showExceptions true
    showStackTraces true
    showFullStackTraces false
    showCauses true
    slowThreshold 2000
    showSummary true
    showSimpleNames false
    showPassed true
    showSkipped true
    showFailed true
    showStandardStreams false
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
    logLevel 'lifecycle'
}
jacocoTestReport.dependsOn test
asciidoctor {
    // By convention it sets
    // sourceDir to src/docs/asciidoc
    // outputDir to ${buildDir}/docs/asciidoc
    // https://asciidoctor.github.io/asciidoctor-gradle-plugin/development-3.x/user-guide/#_include_directives_and_base_directory
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    baseDirFollowsSourceDir()
    options backend: 'html', doctype: 'book'
    dependsOn test, contractTest
}

openApi {
    apiDocsUrl = "http://localhost:$managementPort/actuator/openapi/springdocDefault/yaml"
    outputFileName = 'openapi.yaml'
    outputDir = file "$buildDir/docs"
}
task intTest(type: Test) {
    description = 'Runs integration tests only'
    group = 'verification'

    useJUnitPlatform { excludeEngines 'junit-vintage' }
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
}
check.dependsOn intTest

task buildImage(type: Exec) {
    workingDir rootDir
    executable 'docker'
    args 'build', '-t', 'chassis:openj9', '.'
}
task cleanup(type: Delete) {
    outputs.upToDateWhen { false }
    delete 'log', '.gradle'
    dependsOn clean
}
